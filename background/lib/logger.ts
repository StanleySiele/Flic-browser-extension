// Ignore the no-console lint rule since this file is meant to funnel output to
// the console.
/* eslint-disable no-console */

enum LogLevel {
  log = "log",
  info = "info",
  warn = "warn",
  error = "error",
}

interface LogStyle {
  icon: string
  css: string[]
}

interface LogStyles {
  log: LogStyle
  info: LogStyle
  warn: LogStyle
  error: LogStyle
}

const styles: LogStyles = {
  log: {
    icon: "🪵",
    css: [],
  },
  info: {
    icon: "💡",
    css: ["color: blue"],
  },
  warn: {
    icon: "⚠️",
    css: [
      "color: #63450b",
      "background-color: #fffbe5",
      "border: 1px solid #fff5c2",
      "padding: 0.5em",
    ],
  },
  error: {
    icon: "❌",
    css: [
      "color: #ff1a1a",
      "background-color: #fff0f0",
      "border: 1px solid #ffd6d6",
      "padding: 0.5em",
    ],
  },
}

function genericLogger(level: LogLevel, input: unknown[]) {
  console.group(
    `%c ${styles[level].icon} Tally ${level}`,
    styles[level].css.join(";")
  )

  console.log(...input)

  const stackTrace = new Error().stack?.split("\n")?.filter((line) => {
    // Remove empty lines from the output
    // Chrome prepends the word "Error" to the first line of the trace, but Firefox doesn't
    // Let's ignore that for consistency between browsers!
    if (line.trim() === "" || line.trim() === "Error") {
      return false
    }

    return true
  })

  if (typeof stackTrace !== "undefined") {
    // The first two lines of the stack trace will always be generated by this
    // file, so let's ignore them.
    console.log(stackTrace.slice(2).join("\n"))
  }
  console.groupEnd()
}

const logger = {
  log(...input: unknown[]): void {
    genericLogger(LogLevel.log, input)
  },

  info(...input: unknown[]): void {
    genericLogger(LogLevel.info, input)
  },

  warn(...input: unknown[]): void {
    genericLogger(LogLevel.warn, input)
  },

  error(...input: unknown[]): void {
    genericLogger(LogLevel.error, input)
  },
}

export default logger
